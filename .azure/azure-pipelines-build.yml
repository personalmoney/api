name: $(Major).$(Minor).$(Patch).$(Rev)

trigger:
  branches:
    include:
    - master
    - develop
    - feature/*
  tags:    
    include:
    - '*'
  
pr:
  - master
  - develop
  
variables:
  buildConfiguration: 'Release'

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UseDotNet@2
  inputs:
    version: '3.1.x'
    packageType: sdk
  displayName: 'Tool installation'

- task: DotNetCoreCLI@2
  inputs:
    command: 'restore'
  displayName: 'Restore'

- task: DotNetCoreCLI@2
  inputs:
    command: 'build'
    projects: '**/*.csproj'
    arguments: '--configuration $(BuildConfiguration) /p:Version=$(Build.BuildNumber)'
  displayName: 'Build'

- task: DotNetCoreCLI@2
  displayName: "Install dotnet format"
  inputs:
    command: custom
    custom: tool
    arguments: install -g dotnet-format --version 4.0.130203 --ignore-failed-sources

- task: DotNetCoreCLI@2
  displayName: "Check code format"
  inputs:
    command: 'custom'
    custom: 'format'
    arguments: '--check'

- task: DotNetCoreCLI@2
  displayName: 'Publishing the application'
  condition: or(in(variables['Build.SourceBranch'], 'refs/heads/develop', 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'refs/tags/v'))
  inputs:
    command: publish
    publishWebProjects: True
    arguments: '--configuration $(BuildConfiguration) --output $(Build.ArtifactStagingDirectory) /p:Version=$(Build.BuildNumber)'
    zipAfterPublish: True

- task: PublishBuildArtifacts@1  
  displayName: 'Publishing the artifacts'
  condition: or(in(variables['Build.SourceBranch'], 'refs/heads/develop', 'refs/heads/master'), contains(variables['Build.SourceBranch'], 'refs/tags/v'))
  inputs:
    pathtoPublish: '$(Build.ArtifactStagingDirectory)' 
    artifactName: 'personal-money'
